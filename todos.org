* Meta 
** TODO Get images rendering properly in project 
** TODO Global todo list for project 
** TODO Go through software carpentry material. 
* Lessons 
** TODO IDE Basics. Running and quiting Pyzo  
** DONE Ipython Notebook basics. 
   CLOSED: [2016-08-31 Wed 14:45]
** TODO Finalise setup guide 
*** WAITING Ensure instructions to install pyzo on ubuntu are available 
    - State "WAITING"    from "WAITING"    [2016-08-31 Wed 12:49] \\
      Waiting on ubuntu install
*** DONE Instructions to check installation are up. 
    CLOSED: [2016-08-31 Wed 12:41]
    - CLOSING NOTE [2016-08-31 Wed 12:41] \\
      Donseskis
    - CLOSING NOTE [2016-08-31 Wed 11:44] \\
      Done and dusted
** TODO Difference btw. Python 2 and python 3. 
** TODO 1st Session (longer session to account for installation of software):
** TODO Difference btw. Python 2 and python 3
** TODO Basic python types, operations. Declaring data structures (lists, dictionaries). 
*** DONE Float: a number represented with a decimal place.
    CLOSED: [2016-08-31 Wed 15:31]
*** DONE Integer: a whole number represented without a decimal place.
    CLOSED: [2016-08-31 Wed 15:31]
*** DONE String: a list of characters.
    CLOSED: [2016-08-31 Wed 15:31]
*** TODO Lists: a list of objects.
*** TODO Understanding 2D array (list of lists).
Important for numPy.
numPy, matplotlib to visualise and use actual data.
Create a .csv file relating to a population health study.
Demo of numPy/matplotlib.
Exercises involving classes/library and going to google.
** TODO Basic arithmetic:
*** DONE add or concatenate.
    CLOSED: [2016-08-31 Wed 15:31]
*** DONE / division.
    CLOSED: [2016-08-31 Wed 15:31]
*** DONE // floor division 
    CLOSED: [2016-08-31 Wed 15:31]
*** DONE % modulus.
    CLOSED: [2016-08-31 Wed 15:31]
*** DONE Print statements, Built in functions, help.
    CLOSED: [2016-08-31 Wed 15:31]
*** DONE print()
    CLOSED: [2016-08-31 Wed 15:32]
*** DONE len()
    CLOSED: [2016-08-31 Wed 15:32]
*** TODO substring()
*** TODO find()
*** DONE max()/min()
    CLOSED: [2016-08-31 Wed 16:18]
    - CLOSING NOTE [2016-08-31 Wed 16:18]
*** TODO Search google for some and put emphasis on the fact that memorizing functions are not important but rather a skill picked up by practice. If you were working in a lab you don't need to know everything about the lab just where to look for what you are wanting to use.
** TODO Input 
*** TODO Converting types.
Put emphasis on the difference in some methods when working on different types, and that it is important to make sure we are working with the correct type so that we don't end up with crazy output.
** TODO Debugging 
*** TODO Error messages? Reading them and understanding where the error is.
*** TODO Google? Show how to google error messages.
*** TODO Basic print debugging.
*** TODO Basic problems involving variable assignment, converting input into correct type.

e.g:

A = 1
B = 2
C = 1

print(A = B)
print(B = C)
print(A = C)

What is output?
** TODO Input/Output
*** TODO User input/output. 
*** TODO File input/output.
Make a text file with a large number of lines consisting of 
“Name age gender” for us to import and manipulate during this section.
Avoid the use of unnecessary libraries yet at all costs.
** TODO  Functions.
*** TODO Compartmentalisation for readability and organization. Also to break down a big problem into lots of smaller ones then bring them all together in a main() function.
** TODO Control Flow 
*** TODO loops , conditionals, using actual relevant data.
*** TODO Problem solving.
*** TODO Pseudocode.
**** TODO Decide on a generic pseudocode syntax to use.
Exercises using pseudocode and problem solving to implement functions, loops and conditionals.
** TODO Classes.
Discuss this and make sure everyone understands. Use “super object” analogy to reference the intro analogy made about objects.
** TODO Libraries.
Import some helpful libraries. Make very clear that these are still python but rather code that has been written for you to help you do more complex tasks a lot easier. Show how to google to find methods within this library.
** TODO Random numbers.
** TODO Testing and Debugging.  
*** TODO Try catch.
*** TODO Assertions.
*** TODO Giving a piece of broken code and asking them to fix it. Or giving broken data and asking them to write a program to catch it.
** TODO BRING EVERYTHING TOGETHER!! Give design brief for a program that you help them at each step to create. Make it funny. 





#+TODO: TODO(t) | DONE(d)

* Misc Notes

** All notes named with dot notation to ensure lessons are in order 
** Do we want to seperate basic markdown from basic notebook? 
** Should we get rid of the part that says values only change when something is assignmed to them.? 
** Built in functions 
*** TODO Beware of order of operations. 
*** TODO Random function/Library.  
*** TODO Googling functions. Exercise or Demonstrate. 
*** DONE Multiline comments. 
*** TODO Using stack overflow for code trouble shooting. 

* Lesson Notes 
** Running and Quiting: 
*** .py extension is not mandatory ie. is for humans. 
*** Benefits of using a notebook. 
*** Key shortcuts. 
**** Esc Control mode. 
***** Try some stuff. 
***** A New cell Above. 
***** B New cell below. 
***** X Delete cell. 
**** Ret Edit mode. 
***** Ret adds other lines to code. 
***** Shift + Ret Executes cell. 
*** Rendering markdown with notebooks. 
***** A simplified format that allows us to write documents that will look like webpages. 
***** We can access markdown mode by pressing M in control mode. 
***** Go back to code mode by pressing Y in control mode. 
**** Examples  
***** L1 Header and L2. 
***** Unordered List. 
***** Ordered list. 
***** Links 
***** Named Links 
** Variables and Assignment 
*** = operator. 
*** Allowed variable names. 
**** Cant start with digit. 
**** cant contain spaces, ' marks or other punct except. 
**** underscore ie. used to seperate words in var name. 
**** underscores at start have a special purpose which we wont cover in less. 
*** print function. 
**** displays things. 
**** Used for print debugging. 
*** we call the print function ie. pokemon analogy. 
**** Variables persist between cells once executed. Illustrate this. 
**** Variables must be declared. 
*** last line of error message usually the most usefull. 
**** Python case sensistive. 
***** we recommend using lower case with underscores even though there are many naming conventions. 
**** Use meaningful variable names.
***** Consider your future self 
***** Audience. 
**** Variables can be used in calculations. 
**** Swapping values exercise. 
** Data types and type conversion 
*** Every value has a type. 
**** ints, floats and strings. 
**** type function. Used to determine type of whats stored in variables(not var itself)  
**** type determines operations that can be performed on values. 
***** ints can be subtracted but not stings. 
***** eg. strings can be added and multiplied but has different effect. 
***** Strings have length but not int and floats
***** Must convert types to perform some operations on them. 
***** basic type conversion. 
***** can mix ints and floats freely in ops. 
***** Unlike spreadsheet cells. vars only change value when changed directly.  
** Built in functions and help 
*** What's an argument. 
*** Different functions take different numbers of argumensts 
**** Always use parenthesis even when zero arguments. 
*** min, max and round. 
**** min and max work on strings. 
*** However, functions may only contain certain(combinations of) arguments. 
**** len cant take in. 
**** max and min must have at least one argument. 
*** Some functions have default argument values. 
**** round with 1 value rounds to 0 decimal places. 
*** How do we find this information out?
**** help(function_name)
**** two additional ways in jupyter. 
***** shift - tab in parenthesis of function. 
***** function_name?
*** Every function returns something 
**** None is what it returns when it has nothing useful to return. 
** Error messages. 
*** Comments. 
*** Sytax errors cause. 
*** Sometimes python gives us line numbers with errors. 
*** Reading an error message ipython 
*** U dont have to know all error messages. 
**** stack overflow. 
**** google. 
*** Indentation error
*** 



#+TODO: TODO(t) WAITING(w) | DONE(d)
#+TODO: REPORT(r) BUG(
